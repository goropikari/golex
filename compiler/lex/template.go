package lex

const tmpl = `// Code generated by tlex. DO NOT EDIT.

package {{ .PackageName }}

import (
	"errors"
	"fmt"
	"io"
)

{{ .EmbeddedTmpl }}

type yyStateID = int
type yyRegexID = int
var YYText string

var (
	ErrYYScan = errors.New("failed to scan")
)

// state id to regex id
var yyStateIDToRegexID = []yyRegexID{
	0, // state 0 „ÅØ BH state
    {{ .StateIDToRegexIDTmpl }}
}

var yyFinStates = map[yyStateID]struct{}{
    {{ .FinStatesTmpl }}
}

var yyTransitionTable = map[yyStateID]map[byte]yyStateID{
    {{ .TransitionTableTmpl }}
}

func yyNextStep(id yyStateID, b byte) yyStateID {
	if mp, ok := yyTransitionTable[id]; ok {
		return mp[b]
	}

	return 0
}

type yyLexer struct {
	rs          io.ReadSeeker
	beginPos    int
	finPos      int
	currPos     int
	finRegexID  int
	currStateID yyStateID
	YYText      string
}

func New(rs io.ReadSeeker) *yyLexer {
	return &yyLexer{
		rs:          rs,
		beginPos:    0,
		finPos:      0,
		currPos:     0,
		finRegexID:  0,
		currStateID: 1, // init state id is 1.
	}
}

func (yylex *yyLexer) currByte() (byte, error) {
	b := make([]byte, 1)
	if _, err := yylex.rs.Read(b); err != nil {
		return 0, err
	}
	if _, err := yylex.rs.Seek(int64(yylex.currPos), io.SeekStart); err != nil {
		return 0, err
	}

	return b[0], nil
}

func (yylex *yyLexer) Next() (int, error) {
	yyEofCnt := 0
yystart:
	for  {
		yyb, err := yylex.currByte()
		if err != nil {
			if errors.Is(err, io.EOF) {
				yyEofCnt++
				if yyEofCnt == 1 {
					goto finProcess
				}
			}
			return 0, err
		}
	finProcess:
		yyNxStID := yyNextStep(yylex.currStateID, yyb)
		if yyNxStID == 0 {
			yydata := make([]byte, yylex.finPos+1-yylex.beginPos)
			if _, err := yylex.rs.Seek(int64(yylex.beginPos), io.SeekStart); err != nil {
				return 0, err
			}
			if _, err := yylex.rs.Read(yydata); err != nil {
				return 0, err
			}
			yylex.YYText = string(yydata)
			YYText = yylex.YYText
			yyNewCurrPos := yylex.finPos + 1
			yylex.beginPos = yyNewCurrPos
			yylex.finPos = yyNewCurrPos
			yylex.currPos = yyNewCurrPos
			yylex.currStateID = 1
			if _, err := yylex.rs.Seek(int64(yylex.currPos), io.SeekStart); err != nil {
				return 0, err
			}

			regexID := yylex.finRegexID
			yylex.finRegexID = 0
			switch regexID {
			case 0:
				return 0, ErrYYScan
            {{ .RegexActionsTmpl }}
			default:
				return 0, ErrYYScan
			}
		}
		if _, ok := yyFinStates[yyNxStID]; ok {
			yylex.finPos = yylex.currPos
			yylex.finRegexID = yyStateIDToRegexID[yyNxStID]
		}
		yylex.currStateID = yyNxStID
		yylex.currPos++
		if _, err := yylex.rs.Seek(int64(yylex.currPos), io.SeekStart); err != nil {
			return 0, err
		}
	}

	return 0, io.EOF
}

{{ .UserCodeTmpl }}
`
