package main

import (
	"errors"
	"fmt"
	"log"
)

type Type = int

const (
	Keyword Type = iota + 1
	Identifier
	Digit
	Whitespace
	LParen
	RParen
	LBracket
	RBracket
	Operator
)

type yyStateID = int
type yyRegexID = int

var YYtext string
var (
	ErrYYScan = errors.New("failed to scan")
	EOF       = errors.New("EOF")
)

// state id to regex id
var yyStateIDToRegexID = []yyRegexID{
	0, // state 0 „ÅØ BH state
	4,
	2,
	8,
	1,
	2,
	2,
	5,
	9,
	6,
	2,
	2,
	2,
	2,
	2,
	10,
	2,
	2,
	2,
	10,
	4,
	3,
	2,
	2,
	2,
	7,
	2,
}

var yyFinStates = map[yyStateID]struct{}{
	1:  {},
	2:  {},
	3:  {},
	4:  {},
	5:  {},
	6:  {},
	7:  {},
	8:  {},
	9:  {},
	10: {},
	11: {},
	12: {},
	13: {},
	14: {},
	15: {},
	16: {},
	17: {},
	18: {},
	19: {},
	20: {},
	21: {},
	22: {},
	23: {},
	24: {},
	25: {},
	26: {},
}

var yyTransitionTable = map[yyStateID]map[rune]yyStateID{
	1: {
		33:  15,
		34:  19,
		35:  19,
		36:  19,
		37:  19,
		38:  19,
		39:  19,
		40:  7,
		41:  9,
		42:  8,
		43:  8,
		44:  19,
		45:  8,
		46:  19,
		47:  8,
		48:  19,
		49:  21,
		50:  21,
		51:  21,
		52:  21,
		53:  21,
		54:  21,
		55:  21,
		56:  21,
		57:  21,
		58:  15,
		59:  19,
		60:  19,
		61:  15,
		62:  19,
		63:  19,
		64:  19,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		91:  19,
		92:  19,
		93:  19,
		94:  19,
		95:  19,
		96:  19,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 12,
		103: 22,
		104: 22,
		105: 24,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 14,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 26,
		120: 22,
		121: 22,
		122: 22,
		123: 25,
		124: 19,
		125: 3,
		126: 19,
		32:  20,
		9:   20,
		10:  20,
		13:  20,
	},
	2: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 5,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	4: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	5: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 4,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	6: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 18,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	10: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 13,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	11: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 2,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	12: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 17,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 16,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	13: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 4,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	14: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 6,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	15: {
		61: 8,
	},
	16: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 23,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	17: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 4,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	18: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 10,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	20: {
		32: 20,
		9:  20,
		10: 20,
		13: 20,
	},
	21: {
		48: 21,
		49: 21,
		50: 21,
		51: 21,
		52: 21,
		53: 21,
		54: 21,
		55: 21,
		56: 21,
		57: 21,
	},
	22: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	23: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  4,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	24: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 4,
		103: 22,
		104: 22,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
	26: {
		48:  22,
		49:  22,
		50:  22,
		51:  22,
		52:  22,
		53:  22,
		54:  22,
		55:  22,
		56:  22,
		57:  22,
		65:  22,
		66:  22,
		67:  22,
		68:  22,
		69:  22,
		70:  22,
		71:  22,
		72:  22,
		73:  22,
		74:  22,
		75:  22,
		76:  22,
		77:  22,
		78:  22,
		79:  22,
		80:  22,
		81:  22,
		82:  22,
		83:  22,
		84:  22,
		85:  22,
		86:  22,
		87:  22,
		88:  22,
		89:  22,
		90:  22,
		97:  22,
		98:  22,
		99:  22,
		100: 22,
		101: 22,
		102: 22,
		103: 22,
		104: 11,
		105: 22,
		106: 22,
		107: 22,
		108: 22,
		109: 22,
		110: 22,
		111: 22,
		112: 22,
		113: 22,
		114: 22,
		115: 22,
		116: 22,
		117: 22,
		118: 22,
		119: 22,
		120: 22,
		121: 22,
		122: 22,
	},
}

func yyNextStep(id yyStateID, ru rune) yyStateID {
	if mp, ok := yyTransitionTable[id]; ok {
		return mp[ru]
	}

	return 0
}

type yyLexer struct {
	data        []rune
	length      int
	beginPos    int
	finPos      int
	currPos     int
	finRegexID  int
	currStateID yyStateID
}

func New(data string) *yyLexer {
	runes := []rune(data)
	return &yyLexer{
		data:        runes,
		length:      len(runes),
		beginPos:    0,
		finPos:      0,
		currPos:     0,
		finRegexID:  0,
		currStateID: 1, // init state id is 1.
	}
}

func (yylex *yyLexer) currRune() rune {
	if yylex.currPos >= yylex.length {
		return 0
	}

	return yylex.data[yylex.currPos]
}

func (yylex *yyLexer) Next() (int, error) {
start:
	if yylex.currPos >= yylex.length {
		return 0, EOF
	}
	for yylex.currPos <= yylex.length {
		nxStID := yyNextStep(yylex.currStateID, yylex.currRune())
		if nxStID == 0 {
			YYtext = string(yylex.data[yylex.beginPos : yylex.finPos+1])
			newCurrPos := yylex.finPos + 1
			yylex.beginPos = newCurrPos
			yylex.finPos = newCurrPos
			yylex.currPos = newCurrPos
			yylex.currStateID = 1

			regexID := yylex.finRegexID
			yylex.finRegexID = 0
			switch regexID {
			case 0:
				return 0, ErrYYScan
			case 1:
				{
					return Keyword, nil
				}
				goto start
			case 2:
				{
					return Identifier, nil
				}
				goto start
			case 3:
				{
					return Digit, nil
				}
				goto start
			case 4:
				{
				}
				goto start
			case 5:
				{
					return LParen, nil
				}
				goto start
			case 6:
				{
					return RParen, nil
				}
				goto start
			case 7:
				{
					return LBracket, nil
				}
				goto start
			case 8:
				{
					return RBracket, nil
				}
				goto start
			case 9:
				{
					return Operator, nil
				}
				goto start
			case 10:
				{
				}
				goto start

			default:
				return 0, ErrYYScan
			}
		}
		if _, ok := yyFinStates[nxStID]; ok {
			yylex.finPos = yylex.currPos
			yylex.finRegexID = yyStateIDToRegexID[nxStID]
		}
		yylex.currStateID = nxStID
		yylex.currPos++
	}

	return 0, ErrYYScan
}

func main() {
	program := `
func foo000() int {
    x := 1 * 10 + 123 - 1000 / 5432

    return x
}
`
	fmt.Println(program)
	fmt.Println("-----------------")

	lex := New(program)
	for {
		n, err := lex.Next()
		if err != nil {
			log.Fatal(err)
			return
		}
		switch n {
		case Keyword:
			fmt.Println("Keyword")
		case Identifier:
			fmt.Println("Identifier")
		case Digit:
			fmt.Println("Digit")
		case Whitespace:
			fmt.Println("Whitespace")
		case LParen:
			fmt.Println("LParen")
		case RParen:
			fmt.Println("RParen")
		case LBracket:
			fmt.Println("LBracket")
		case RBracket:
			fmt.Println("RBracket")
		case Operator:
			fmt.Println("Operator")
		}
		fmt.Printf("\t %#v\n", YYtext)
	}
}
